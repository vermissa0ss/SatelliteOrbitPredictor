import plotly.express as pxfrom shared_data import m_PSharedfrom porpagate_sgp4 import propagate_SGP4from skyfield.api import Distance, load, wgs84from skyfield.positionlib import Geocentricimport numpy as npclass plot_orbit:    """    This class has one attribute: plot_specific_orbit, in which plots the a     satellite's orbit given the satellite id'    """    def plot_specific_orbit(orbit_id):        """        plot_specific_orbit(orbit_id) plots the specified satellite's orbit ffrom        the current time to 12 hours.         input: orbit_id: The ID of the orbit from tle file        output: interactive plot plotted the orbit for 12 hours.         """        # Get satellite data from tle        multiple_tle_data_dic = m_PShared.get_gps_sats()        lat = []; lon = [];        # Define time sequence for an hours        t_array = np.linspace(0,12,12)        for time in t_array:                        # Get current date and time and convert to jday and fraction            yyyy, mm, dd, hh, MM ,ss = m_PShared.get_current_time()            jday, fraction = m_PShared.get_jday_from_date(float(yyyy), float(mm), float(dd), float(hh)+time, float(MM) ,float(ss))                        # Solve for position and velocity using propagate orbit            dic_satID_pos_vel = propagate_SGP4.propagate_from_dic(multiple_tle_data_dic, jday, fraction)                        # Convert to lla coordinates using skyfield module            ts = load.timescale()            t = ts.now()            d = Distance(m=[dic_satID_pos_vel[orbit_id][0][0], dic_satID_pos_vel[orbit_id][0][1], dic_satID_pos_vel[orbit_id][0][2]])            p = Geocentric(d.km, t=t)            g = wgs84.subpoint(p)            print(g)            lat.append(g.latitude.degrees)            lon.append(g.longitude.degrees)                        fig = px.line_geo(lat=lat, lon=lon)        fig.update_geos(fitbounds="locations")        fig.update_layout(height=300, margin={"r":0,"t":0,"l":0,"b":0})        fig.show()